{"version":3,"sources":["Navbar/Navbar.js","Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["navbar","className","href","content","props","name","age","App","state","persons","title","email","phoneNumber","linkedinProfile","btnEventHandler","alert","Navbar","Content","this","role","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAUeA,G,mBAPA,WACX,OAAO,yBAAKC,UAAU,8BACrB,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,6BCKUC,EARC,SAACC,GACb,OACI,6BACI,qCAAWA,EAAMC,MACjB,oCAAUD,EAAME,OC4BbC,E,2MA3BXC,MAAQ,CACJC,QAAU,CACN,CAACJ,KAAM,UAAWC,IAAK,KAAOI,MAAM,sBAAwBC,MAAO,wBAA0BC,YAAa,cAAgBC,gBAAiB,M,EAInJC,gBAAkB,WACdC,MAAM,6B,wEAIN,OACI,6BACA,kBAACC,EAAD,MAEA,kBAACC,EAAD,CAASZ,KAAMa,KAAKV,MAAMC,QAAQ,GAAGJ,KAAMC,IAAKY,KAAKV,MAAMC,QAAQ,GAAGH,MACtE,yBAAKL,UAAU,sBAAsBkB,KAAK,SAA1C,8CAGA,4BAAQC,QAASF,KAAKJ,iBAAtB,kB,GApBMO,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f65f35fb.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst navbar = () => {\r\n    return <nav className=\"navbar navbar-dark bg-dark\">\r\n     <a className=\"navbar-brand\" href=\"#\">Muhammad Zeeshan Zafar</a>\r\n  </nav>\r\n  \r\n};\r\n\r\nexport default navbar;","import React from 'react';\r\n\r\nconst content = (props) => {\r\n    return(\r\n        <div>\r\n            <h3>Name: {props.name}</h3>\r\n            <h5>Age: {props.age}</h5>\r\n        </div>\r\n    )\r\n};\r\nexport default content;","import React from 'react';\nimport './App.css';\nimport { directive } from '@babel/types';\nimport { builtinModules } from 'module';\nimport Navbar from './Navbar/Navbar';\nimport Content from './Content/Content';\nclass App extends React.Component {\n    state = {\n        persons : [\n            {name: 'Zeeshan', age: '23' , title:\"Front End Developer\" , email: \"zeeshan2636@gmail.com\" , phoneNumber: \"03365192096\" , linkedinProfile: \"\"},\n        ]\n    }\n\n    btnEventHandler = () => {\n        alert(\"You just clicke a button\")\n    }\n\n    render() {\n        return (\n            <div>\n            <Navbar/>\n        \n            <Content name={this.state.persons[0].name} age={this.state.persons[0].age} />\n            <div className=\"alert alert-primary\" role=\"alert\">\n                This is a primary alertâ€”check it out!\n            </div>\n            <button onClick={this.btnEventHandler}>\n                Click me!\n            </button>\n            </div>\n            \n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}